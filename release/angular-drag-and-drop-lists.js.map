{"version":3,"sources":["angularDirective.ts","dndService.ts","dndDraggable.ts","dndList.ts"],"names":["dndList","directive","values","_i","arguments","length","target","args","classConstructor","ctor","prototype","child","result","apply","$inject","DndService","angular","module","service","DndDraggable","$parse","$timeout","dndService","_this","this","link","scope","element","attrs","parent","nextElement","initwidth","initheight","self","mouseX","mouseY","transformX","transformY","isDragging","registerDrag","elements","draggableElements","interact","draggable","manualStart","on","event","disabled","interaction","pointerIsDown","interacting","document","body","addClass","source","lists","querySelectorAll","i","list","dropzone","rect","getBoundingClientRect","left","clientX","top","clientY","newNode","cloneNode","newElement","css","nextElementSibling","width","height","appendChild","style","webkitTransform","transform","draggingObject","$eval","dndDraggable","isDroped","draggingElementScope","draggingElement","dndDragstart","inertia","autoScroll","start","name","interactable","display","stop","parentNode","removeChild","endDrag","removeClass","ngDisabled","$watch","newValue","oldValue","unregisterDrag","clickHandler","dndSelected","$apply","stopPropagation","registerClick","off","dndMoved","dndDragend","dndCanceled","dndHandle","handleString","__decorate","DndList","placeholder","dndHorizontalList","getPlaceholderElement","placeholderNode","listNode","remove","dropX","dropY","stopDragover","append","dragTarget","elementFromPoint","dragEvent","listItemNode","isMouseInFirstHalf","insertBefore","dndDragover","invokeCallback","getPlaceholderIndex","transferredObject","copy","stopDrop","index","dndBeforeDrop","dndDrop","splice","dndInserted","targetNode","horizontal","mousePointer","targetSize","targetPosition","Array","indexOf","call","children","expression","item","undefined","forEach","childNode","hasClass"],"mappings":"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","file":"angular-drag-and-drop-lists.js","sourcesContent":["/// <reference path=\"..\\typings\\index.d.ts\" />\r\nmodule dndList {\r\n    /**\r\n     * Decorator for AngularJS directives\r\n     * @param values\r\n     */\r\n    export function directive(...values: string[]): any {\r\n        return (target: Function) => {\r\n            const directive: Function = (...args: any[]): Object => {\r\n                return ((classConstructor: Function, args: any[], ctor: any): Object => {\r\n                    ctor.prototype = classConstructor.prototype;\r\n                    const child: Object = new ctor;\r\n                    const result: Object = classConstructor.apply(child, args);\r\n                    return typeof result === \"object\" ? result : child;\r\n                })(target, args, () => {\r\n                    return null;\r\n                });\r\n            };\r\n            directive.$inject = values;\r\n            return directive;\r\n        };\r\n    }\r\n}","/// <reference path=\"..\\typings\\index.d.ts\" />\r\n/// <reference path=\"interact.d.ts\"/>\r\n\r\nmodule dndList {\r\n    export interface IDndService {\r\n        draggingObject: any,\r\n        isDroped: boolean\r\n        stopDrop: boolean,\r\n        draggingElement: any,\r\n        draggingElementScope:any\r\n    }\r\n    /**\r\n     * DndService\r\n     */\r\n    class DndService {\r\n        public draggingObject: any;\r\n        public stopDrop: boolean;\r\n        public isDroped: boolean;\r\n        public draggingElement: any;\r\n        public draggingElementScope:any;\r\n    }\r\n\r\n    angular.module('dndLists', []).service('dndService',\r\n        DndService);\r\n}","/// <reference path=\"..\\typings\\index.d.ts\" />\r\n/// <reference path=\"interact.d.ts\"/>\r\n/// <reference path=\"angularDirective.ts\" />\r\n/// <reference path=\"dndService.ts\" />\r\n\r\nmodule dndList {\r\n    interface DndDraggableScope extends angular.IScope {\r\n        endDrag: (event) => boolean,\r\n        disabled: boolean\r\n    }\r\n\r\n    @dndList.directive('$parse', '$timeout', 'dndService')\r\n    class DndDraggable implements ng.IDirective {\r\n        constructor(private $parse: angular.IParseService,\r\n            private $timeout: angular.ITimeoutService,\r\n            private dndService: IDndService) {\r\n        }\r\n\r\n        public link: angular.IDirectiveLinkFn = (scope: DndDraggableScope, element: ng.IAugmentedJQuery,\r\n            attrs: any): void => {\r\n            var self = this;\r\n            var mouseX = 0;\r\n            var mouseY = 0;\r\n            var transformX = 0;\r\n            var transformY = 0;\r\n            var parent: HTMLElement;\r\n            var nextElement: HTMLElement;\r\n            var initwidth;\r\n            var initheight;\r\n            var isDragging = false;\r\n            var registerDrag = (elements: any) => {\r\n                if (typeof elements == 'string') {\r\n                    elements = element[0].querySelectorAll(elements);\r\n                    for (var i = 0; i < elements.length; i++)\r\n                        registerDrag(elements[i]);\r\n                    return;\r\n                }\r\n                draggableElements = elements;\r\n                interact(elements).draggable({\r\n                    // disable the default drag start by down->move\r\n                    manualStart: true\r\n                }).on('move', (event) => {\r\n                    if (isDragging) return;\r\n                    if (scope.disabled) return;\r\n                    var interaction = event.interaction;\r\n                   \r\n                    // if the pointer was moved while being held down\r\n                    // and an interaction hasn't started yet\r\n                    if (!interaction.pointerIsDown || interaction.interacting())\r\n                        return;\r\n                    angular.element(document.body).addClass('dndDraggingBody');\r\n                    isDragging = true;\r\n                    var source = <HTMLElement>element[0];\r\n                    var lists = source.querySelectorAll('[dnd-list]');\r\n                    for (var i = 0; i < lists.length; i++) {\r\n                        var list = lists[i];\r\n                        interact(list).dropzone(false);\r\n                    }\r\n                    var rect = source.getBoundingClientRect();\r\n                    mouseX = rect.left - event.clientX;\r\n                    mouseY = rect.top - event.clientY;\r\n                    transformX = 0;\r\n                    transformY = 0;\r\n                    var newNode = <HTMLElement>element[0].cloneNode(true);\r\n                    var newElement = angular.element(newNode);\r\n                    parent = element.parent()[0];\r\n                    initheight = element.css('height');\r\n                    initwidth = element.css('width');\r\n                    nextElement = <HTMLElement>source.nextElementSibling;\r\n                    newElement.addClass(\"dndDragging\");\r\n                    newElement.css('width', rect.width + \"px\");\r\n                    newElement.css('height', rect.height + \"px\");\r\n                    document.body.appendChild(newElement[0]);\r\n                    rect = source.getBoundingClientRect();\r\n                    // translate the element\r\n                    transformX += event.clientX - rect.left + mouseX;\r\n                    transformY += event.clientY - rect.top + mouseY;\r\n                    newNode.style.webkitTransform =\r\n                        newNode.style.transform =\r\n                        'translate(' + transformX + 'px, ' + transformY + 'px)';\r\n                    self.dndService.draggingObject = scope.$eval(attrs.dndDraggable);\r\n                    self.dndService.isDroped = false;\r\n                    self.dndService.draggingElementScope = scope;\r\n                    self.dndService.draggingElement = newNode;\r\n                    \r\n                    self.$timeout(() => {\r\n                        self.$parse(attrs.dndDragstart)(scope, { event: event });\r\n                    }, 0);\r\n                    interact(newNode).draggable({\r\n                        inertia: true,\r\n                        autoScroll: false,\r\n                    })\r\n                    event.interaction.start({ name: 'drag' },\r\n                        event.interactable, newNode);\r\n                    source.style.display = 'none';\r\n                    \r\n                }).on('dragend', (event) => {\r\n                    \r\n                    if (scope.disabled) return;\r\n                    event.interaction.stop();\r\n                    //I don't know why but in quickrun dragend is called twice\r\n                    if(!event.target||!event.target.parentNode)\r\n                        return;\r\n                    (<HTMLElement>event.target).parentNode.removeChild(event.target);\r\n                    var lists = element[0].querySelectorAll('[dnd-list]');\r\n                    for (var i = 0; i < lists.length; i++) {\r\n                        var list = lists[i];\r\n                        interact(list).dropzone(true);\r\n                    }\r\n                    self.$timeout(() => { \r\n                        scope.endDrag(event); \r\n                        element[0].style.display = 'block';\r\n                        angular.element(document.body).removeClass('dndDraggingBody');\r\n                    }, 0);\r\n                }).on('dragmove', (event) => {\r\n                    if (scope.disabled) return;\r\n                    var rect = event.target.getBoundingClientRect();\r\n                    var target = event.target;\r\n                    // translate the element\r\n                    transformX += event.clientX - rect.left + mouseX;\r\n                    transformY += event.clientY - rect.top + mouseY;\r\n                    target.style.webkitTransform =\r\n                        target.style.transform =\r\n                        'translate(' + transformX + 'px, ' + transformY + 'px)';\r\n                });\r\n            }\r\n            if (attrs.ngDisabled) {\r\n                scope.disabled = scope.$eval(attrs.ngDisabled);\r\n                scope.$watch(attrs.ngDisabled, function (newValue, oldValue) {\r\n                    scope.disabled = <boolean>newValue;\r\n                    if (!newValue)\r\n                        registerDrag(draggableElements);\r\n                    else {\r\n                        unregisterDrag();\r\n                        scope.endDrag(null);\r\n                    }\r\n                });\r\n            }\r\n            var clickHandler = function (event) {\r\n                if (scope.disabled) return;\r\n                if (!attrs.dndSelected) return;\r\n\r\n                scope.$apply(function () {\r\n                    self.$parse(attrs.dndSelected)(scope, { event: event });\r\n                });\r\n\r\n                // Prevent triggering dndSelected in parent elements.\r\n                event.stopPropagation();\r\n            };\r\n            var registerClick = () => {\r\n                element.off('click touchstart', clickHandler);\r\n                element.on('click touchstart', clickHandler);\r\n            };\r\n            registerClick();\r\n            var draggableElements: any;\r\n            var unregisterDrag = () => {\r\n                interact(draggableElements).draggable(false);\r\n            }\r\n            scope.endDrag = (event) => {\r\n                if (!isDragging) return;\r\n                isDragging = false;\r\n                element.removeClass(\"dndDragging\");\r\n                if (self.dndService.isDroped) {\r\n                    if (!self.$parse(attrs.dndMoved)(scope, { event: event })) {\r\n                        self.dndService.isDroped = false;\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    self.$parse(attrs.dndCanceled)(scope, { event: event });\r\n                    return false;\r\n                }\r\n                self.$parse(attrs.dndDragend)(scope, { event: event, isDroped: self.dndService.isDroped });\r\n                self.dndService.isDroped = false;\r\n                return true;\r\n            };\r\n            \r\n\r\n            if (attrs.dndHandle) {\r\n                var handleString = scope.$eval(attrs.dndHandle);\r\n                registerDrag(handleString);\r\n                scope.$watch(attrs.dndHandle, function (newValue, oldValue, scope) {\r\n                    unregisterDrag();\r\n                    registerDrag(newValue);\r\n                });\r\n            } else {\r\n                registerDrag(element[0]);\r\n            }\r\n        }\r\n    }\r\n    angular.module('dndLists').directive('dndDraggable',\r\n        <any>DndDraggable);\r\n\r\n}","/// <reference path=\"..\\typings\\index.d.ts\" />\r\n/// <reference path=\"interact.d.ts\"/>\r\n/// <reference path=\"angularDirective.ts\" />\r\n/// <reference path=\"dndService.ts\"/>\r\n\r\nmodule dndList {\r\n    interface DndListScope extends angular.IScope {\r\n        disabled: boolean\r\n    }\r\n\r\n    @dndList.directive('$parse', '$timeout', 'dndService')\r\n    class DndList implements ng.IDirective {\r\n        constructor(private $parse: angular.IParseService,\r\n            private $timeout: angular.ITimeoutService,\r\n            private dndService: IDndService) {\r\n        }\r\n\r\n        public isMouseInFirstHalf(event, targetNode, horizontal = false) {\r\n            var dragEvent = event.dragEvent;\r\n            var mousePointer = horizontal ? dragEvent.clientX\r\n                : dragEvent.clientY;\r\n            var rect = targetNode.getBoundingClientRect();\r\n            var targetSize = horizontal ? rect.width : rect.height;\r\n            var targetPosition = horizontal ? rect.left : rect.top;\r\n            return mousePointer < targetPosition + targetSize / 2;\r\n        }\r\n\r\n        public link: angular.IDirectiveLinkFn = (scope: DndListScope, element: ng.IAugmentedJQuery,\r\n            attrs: any): void => {\r\n            // While an element is dragged over the list, this placeholder element is inserted\r\n            // at the location where the element would be inserted after dropping\r\n\r\n            var horizontal = attrs.dndHorizontalList && scope.$eval(attrs.dndHorizontalList);\r\n            var placeholder = this.getPlaceholderElement(element);\r\n            var placeholderNode = placeholder[0];\r\n            var listNode = element[0];\r\n            placeholder.remove();\r\n            var self = this;\r\n            var dropX = 0;\r\n            var dropY = 0;\r\n            var unsubscribeDragStart: () => void;\r\n            interact(element[0]).dropzone({\r\n            }).on('dragenter', (event) => {\r\n                if (scope.disabled) return;\r\n                dropX = 0;\r\n                dropY = 0;\r\n                self.dndService.isDroped = false;\r\n            }).on('dragleave', (event) => {\r\n                return self.stopDragover(placeholder, element);\r\n            }).on('dropmove', (event) => {\r\n                if (scope.disabled) return self.stopDragover(placeholder, element);\r\n                var source = angular.element(self.dndService.draggingElement);\r\n                // First of all, make sure that the placeholder is shown\r\n                // This is especially important if the list is empty\r\n                if (placeholderNode.parentNode != listNode) {\r\n                    element.append(placeholder);\r\n                }\r\n                var dragTarget: HTMLElement;\r\n                var display = source.css('display');\r\n                source.css('display', 'none');\r\n                dragTarget = <HTMLElement>document.elementFromPoint(event.dragEvent.clientX, event.dragEvent.clientY);\r\n                source.css('display', display);\r\n                if (dragTarget !== listNode) {\r\n                    // Try to find the node direct directly below the list node.\r\n                    var listItemNode = dragTarget;\r\n                    while (listItemNode.parentNode !== listNode && listItemNode.parentNode) {\r\n                        listItemNode = <HTMLElement>listItemNode.parentNode;\r\n                    }\r\n\r\n                    if (listItemNode.parentNode === listNode && listItemNode !== placeholderNode) {\r\n                        // If the mouse pointer is in the upper half of the child element,\r\n                        // we place it before the child element, otherwise below it.\r\n                        if (self.isMouseInFirstHalf(event, listItemNode)) {\r\n                            listNode.insertBefore(placeholderNode, listItemNode);\r\n                        } else {\r\n                            listNode.insertBefore(placeholderNode, listItemNode.nextElementSibling);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (attrs.dndDragover &&\r\n                    !self.invokeCallback(scope, attrs.dndDragover, event,\r\n                        self.getPlaceholderIndex(listNode, placeholderNode), self.dndService.draggingObject)) {\r\n                    self.stopDragover(placeholder, element);\r\n                }\r\n\r\n                element.addClass(\"dndDragover\");\r\n            }).on('drop', (event) => {\r\n                //disable duplicate invoke\r\n                if (self.dndService.isDroped)\r\n                    return;\r\n                if (scope.disabled) return self.stopDragover(placeholder, element);\r\n                var transferredObject = self.dndService.draggingObject;\r\n                if (!transferredObject)\r\n                    return self.stopDragover(placeholder, element);\r\n                transferredObject = angular.copy(transferredObject);\r\n                self.$timeout(() => {\r\n                    if (self.dndService.stopDrop) {\r\n                        self.dndService.isDroped = false;\r\n                        self.dndService.draggingElementScope.endDrag();\r\n                        return self.stopDragover(placeholder, element);\r\n                    }\r\n\r\n                    // Invoke the callback, which can transform the transferredObject and even abort the drop.\r\n                    var index = self.getPlaceholderIndex(listNode, placeholderNode);\r\n                    if (index < 0)\r\n                        return self.stopDragover(placeholder, element);\r\n\r\n                    if (attrs.dndDragover &&\r\n                        !self.invokeCallback(scope, attrs.dndDragover, event,\r\n                            index, transferredObject)) {\r\n                        return self.stopDragover(placeholder, element);\r\n                    }\r\n                    if(attrs.dndBeforeDrop)\r\n                    {\r\n                        var result = self.invokeCallback(scope, attrs.dndBeforeDrop, event, index, transferredObject);\r\n                        if (!result) {\r\n                            self.dndService.isDroped = false;\r\n                            self.dndService.draggingElementScope.endDrag(event);\r\n                            return self.stopDragover(placeholder, element);\r\n                        }\r\n                    }\r\n                    \r\n                    self.dndService.isDroped = true;\r\n                    if (!self.dndService.draggingElementScope.endDrag(event))\r\n                        return self.stopDragover(placeholder, element);\r\n                    index = self.getPlaceholderIndex(listNode, placeholderNode);\r\n                    if (attrs.dndDrop) {\r\n                        transferredObject = self.invokeCallback(scope, attrs.dndDrop, event, index, transferredObject);\r\n                    }\r\n\r\n                    // Insert the object into the array, unless dnd-drop took care of that (returned true).\r\n                    if (transferredObject !== true) {\r\n                        scope.$eval(attrs.dndList).splice(index, 0, transferredObject);\r\n                    }\r\n                    self.invokeCallback(scope, attrs.dndInserted, event, index, transferredObject);\r\n\r\n                    self.stopDragover(placeholder, element);\r\n                }, 0);\r\n            });\r\n            if (attrs.ngDisabled) {\r\n                scope.disabled = scope.$eval(attrs.ngDisabled);\r\n                if (scope.disabled)\r\n                    interact(element[0]).dropzone(false);\r\n                scope.$watch(attrs.ngDisabled, function (newValue, oldValue) {\r\n                    scope.disabled = <boolean>newValue;\r\n                    if (!newValue)\r\n                        interact(element[0]).dropzone(true);\r\n                    else {\r\n                        interact(element[0]).dropzone(false);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        stopDragover(placeholder, element) {\r\n            placeholder.remove();\r\n            element.removeClass(\"dndDragover\");\r\n            return true;\r\n        }\r\n\r\n        getPlaceholderIndex(listNode, placeholderNode) {\r\n            return Array.prototype.indexOf.call(listNode.children, placeholderNode);\r\n        }\r\n\r\n        invokeCallback(scope, expression, event, index, item = null) {\r\n            return this.$parse(expression)(scope, {\r\n                event: event,\r\n                index: index,\r\n                item: item || undefined\r\n            });\r\n        }\r\n\r\n        public getPlaceholderElement(element: JQuery) {\r\n            var placeholder: JQuery;\r\n            angular.forEach(element.children(),\r\n                (childNode) => {\r\n                    var child = angular.element(childNode);\r\n                    if (child.hasClass('dndPlaceholder')) {\r\n                        placeholder = child;\r\n                    }\r\n                });\r\n            return placeholder || angular.element(\"<li class='dndPlaceholder'></li>\");\r\n        }\r\n    }\r\n    angular.module('dndLists').directive('dndList',\r\n        <any>DndList);\r\n\r\n}"],"sourceRoot":"/source/"}